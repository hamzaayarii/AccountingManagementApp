pipeline {
    agent any

    environment { 
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "192.168.33.10:8083/repository/docker-repo/"
        NEXUS_REPOSITORY = "docker-repo"
        NEXUS_CREDENTIAL_ID = "nexus"
        DOCKER_IMAGE = "nodemongoapp"
        DOCKER_TAG = "6.0"

        registryCredentials = "nexus"
        registry = "192.168.33.10:8083"

        RELEASE_REPO = 'docker-repo'
    } 

    stages {
       stage('Install Dependencies') {
    steps {
        dir('backend') {
            // Clean node_modules and package-lock.json to prevent ENOTEMPTY errors
            sh '''
                echo "Cleaning node_modules and npm cache..."
                rm -rf node_modules package-lock.json
                npm cache clean --force
                npm install
            '''
        }
    }
}


        stage('Run Unit Tests') {
            steps {
                // Navigate to the backend folder before running tests
                dir('backend') {
                    sh 'npm test'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {  
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                } 
            }
        }

        stage('Build Application') {
            steps {
                // Navigate to the backend folder before building the application
                dir('backend') {
                    sh 'npm run build'
                }
            }
        }

        // Building Docker images
        stage('Building images (node and mongo)') {
            steps {
                script {
                    sh 'sudo docker-compose build'
                }
            }
        }

        // Uploading Docker images into Nexus Registry
        stage('Deploy to Nexus') {
            steps {  
                script {
                    docker.withRegistry("http://$registry", registryCredentials) {
                        sh 'docker push $registry/$DOCKER_IMAGE:$DOCKER_TAG'
                    }
                }
            }
        }

        // Uploading artifacts to Nexus Repository
        stage("Upload Artifact") {
            steps {
                nexusArtifactUploader(
                    nexusVersion: "${NEXUS_VERSION}",
                    protocol: "${NEXUS_PROTOCOL}",
                    nexusUrl: "${NEXUS_URL}",
                    groupId: 'Dev',
                    version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                    repository: "${RELEASE_REPO}",
                    credentialsId: "${NEXUS_CREDENTIAL_ID}",
                    artifacts: [
                        [
                            artifactId: 'vproapp',
                            classifier: '',
                            file: 'target/vprofile-v2.war', // Path to your artifact
                            type: 'war'
                        ]
                    ]
                )
            }
        }
    }
}
